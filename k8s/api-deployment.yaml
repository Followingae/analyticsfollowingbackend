# API Service Deployment - User-facing requests only
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-api
  namespace: analytics-platform
  labels:
    app: analytics-api
    component: api
    version: v1
spec:
  replicas: 3  # High availability for user requests
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime deployments
  selector:
    matchLabels:
      app: analytics-api
  template:
    metadata:
      labels:
        app: analytics-api
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api
        image: analytics-platform/api:latest
        imagePullPolicy: Always

        # Environment configuration
        env:
        - name: SERVICE_MODE
          value: "api_only"
        envFrom:
        - configMapRef:
            name: analytics-config
        - secretRef:
            name: analytics-secrets

        # Resource allocation optimized for API
        resources:
          requests:
            cpu: "500m"      # 0.5 CPU core per replica
            memory: "1Gi"    # 1GB RAM per replica
          limits:
            cpu: "1000m"     # 1 CPU core max per replica
            memory: "2Gi"    # 2GB RAM max per replica

        # Health checks for API service
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1

        # Container ports
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP

        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Needed for tmp files
          capabilities:
            drop:
            - ALL

        # Volume mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache

      # Pod security and scheduling
      securityContext:
        fsGroup: 1000

      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi

      # Node affinity for API pods (prefer compute-optimized nodes)
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["compute-optimized"]

        # Pod anti-affinity for high availability
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["analytics-api"]
              topologyKey: kubernetes.io/hostname

      # Tolerations for dedicated API nodes
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "api"
        effect: "NoSchedule"

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: analytics-api-service
  namespace: analytics-platform
  labels:
    app: analytics-api
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8000
    protocol: TCP
    name: https
  selector:
    app: analytics-api

  # Session affinity for better caching
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: analytics-api-hpa
  namespace: analytics-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: analytics-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: analytics-api-pdb
  namespace: analytics-platform
spec:
  minAvailable: 2  # Always keep 2 API pods available
  selector:
    matchLabels:
      app: analytics-api