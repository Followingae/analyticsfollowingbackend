# Production Docker Compose - Industry Standard Background Execution Architecture
# Complete isolation between user-facing API and background processing
version: '3.8'

services:
  # ===========================================================================
  # USER-FACING API SERVICE - Optimized for <50ms response times
  # ===========================================================================
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    image: analytics-platform/api:latest
    container_name: analytics-api

    environment:
      - SERVICE_MODE=api_only
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - ENABLE_PERFORMANCE_MONITORING=true
      - LOG_LEVEL=INFO

    ports:
      - "8000:8000"

    depends_on:
      - redis
      - postgres

    # Resource limits for API service
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

    # Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Restart policy
    restart: unless-stopped

    # Networks
    networks:
      - analytics-network

  # ===========================================================================
  # BACKGROUND WORKERS - CDN and Discovery Processing
  # ===========================================================================
  workers:
    build:
      context: ..
      dockerfile: docker/Dockerfile.workers
    image: analytics-platform/workers:latest

    environment:
      - SERVICE_MODE=background_worker
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DECODO_API_KEY=${DECODO_API_KEY}
      - C_FORCE_ROOT=1

    depends_on:
      - redis
      - postgres

    # Scale workers based on load
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '3.0'
          memory: 6G
        reservations:
          cpus: '1.5'
          memory: 3G

    # Health checks
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

    restart: unless-stopped
    networks:
      - analytics-network

  # ===========================================================================
  # AI WORKERS - CPU/GPU Intensive Processing
  # ===========================================================================
  ai-workers:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ai
    image: analytics-platform/ai-workers:latest

    environment:
      - SERVICE_MODE=ai_worker
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - AI_MODEL_CACHE_DIR=/app/models
      - AI_BATCH_SIZE=16
      - AI_MAX_WORKERS=2

    volumes:
      - ai_models:/app/models
      - ai_cache:/app/ai_cache

    depends_on:
      - redis
      - postgres

    # Resource allocation for AI processing
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

    # Health checks for AI workers
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; print('AI worker healthy')"]
      interval: 120s
      timeout: 30s
      retries: 3
      start_period: 180s

    restart: unless-stopped
    networks:
      - analytics-network

  # ===========================================================================
  # REDIS - Multi-layer caching and job queues
  # ===========================================================================
  redis:
    image: redis:7-alpine
    container_name: analytics-redis

    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru

    ports:
      - "6379:6379"

    volumes:
      - redis_data:/data

    # Resource allocation
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

    # Health checks
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    restart: unless-stopped
    networks:
      - analytics-network

  # ===========================================================================
  # POSTGRESQL - Supabase-compatible database
  # ===========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres

    environment:
      - POSTGRES_DB=analytics
      - POSTGRES_USER=analytics_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    ports:
      - "5432:5432"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d

    # Resource allocation
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

    # Health checks
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d analytics"]
      interval: 30s
      timeout: 10s
      retries: 3

    restart: unless-stopped
    networks:
      - analytics-network

  # ===========================================================================
  # PROMETHEUS - Metrics collection and monitoring
  # ===========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: analytics-prometheus

    ports:
      - "9090:9090"

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    restart: unless-stopped
    networks:
      - analytics-network

  # ===========================================================================
  # GRAFANA - Metrics visualization and dashboards
  # ===========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: analytics-grafana

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false

    ports:
      - "3000:3000"

    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards

    depends_on:
      - prometheus

    restart: unless-stopped
    networks:
      - analytics-network

  # ===========================================================================
  # NGINX - Load balancer and reverse proxy
  # ===========================================================================
  nginx:
    image: nginx:alpine
    container_name: analytics-nginx

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/certs

    depends_on:
      - api

    restart: unless-stopped
    networks:
      - analytics-network

# ==============================================================================
# VOLUMES - Persistent data storage
# ==============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ai_models:
    driver: local
  ai_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==============================================================================
# NETWORKS - Service communication
# ==============================================================================
networks:
  analytics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16